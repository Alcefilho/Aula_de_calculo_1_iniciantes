# -*- coding: utf-8 -*-
"""Cálculo1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17FvvQ0ihKkoU4JWQgKdN37xvcu8z-xh-

#**INTRODUÇÃO**

Primeiramente deveremos falar das operações matematicas **básicas** do python como :


*   '+' soma 
*   '-' subtração
*   '/' divisão
*   '*' multiplicação
*   '**' potenciação 

Agora falaremos um pouco do dominio dos numeros, em linguaguem de computação temos definições de numeros assim como na matématica, porém a linguaguem é um pouco diferente da matematica usual, não mostramos para o computador os numeros reais como **R** ( estamos abtuados com isso) porém em python os numeros tem as seguintes categorias:

*   Inteiro -> **int**
"""

a=2
type(a)

"""* Reais -> **float**"""

b=0.345
type(b)

"""* Complexos -> **complex**"""

c=3+10j
 type(c)

"""##**Função Lambda**

Não vou entrar em super detalhes pois essa função é um topico intermediario da linguaguem python mas basicamente são funções anônimas que podem ser criadas com a palavra-chave lambda. Essa função recebe parâmetros (mais de 1, ou seja, pode receber 'x' e 'y') e retorna um valor depois que feita uma operação, é basicamente uma f(x) ou f(x,y) que vocês estão abtuados.

Farei aqui apenas para **uma** variavel, pois estamos tentando resolver apenas exericios de cálculo de uma variavel, que é o **cálculo 1**.

##**Sintaxe da função Lambda**
O passo a passo para formação de uma função lambda:
* Definimos a função com a palavra lambda
* Após definir a função os parâmetros devem ser inseridos
* Colocamos : após os parâmetros
* Inserimos a lógica da função
* Podemos definir uma variável para a função lambda
"""

# Exemplo de uma função lambda
g = lambda x, y : x + y

# agora basta chamar a função (f) e por os valores dos parâmetros 
g(1,2)

"""##**Utilizando a biblioteca Sympy**

A linguaguem Python é **poderosa** pelo vasto números de bibliotecas que nada mais é do que uma coleção de funções. Um programa pode utilizar recursos de uma biblioteca a fim de contribuir para alcançar seu objetivo. Um **módulo** é um arquivo Python (*.py) com instruções e comandos. Um módulo é executado quando é importado.
"""

# Podemos importar bibliotecas com o seguinte comando:
import sympy as sym
# Sempre usar o import (nome da biblioteca) as (apelido da biblioteca)

# Podemos importar os módulos dessas bibliotecas da seguinte maneira:
from sympy import *
init_printing()
# seleciona a melhor saída disponível (não se assunte isso é apenas para melhorar a saída do codigo no ambiente que estou trabalhando(python))

"""Agora que já importamos o que precisavamos, mãos a obra

##**Definindo a variável independente e dependente**

Como estamos abtuados iremos trabalhar como  X sendo a variavel independente e Y a variavel dependente, ou seja, y=f(x), para fazermos isso iremos utliizar o comando:
"""

from IPython.display import HTML, Math
def mview(e):
  display(HTML("<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/"
         "latest.js?config=default'></script>"))
  return Math(latex(e))

init_printing()
x, y = sym.symbols('x y')
mview(var(' x y'))
# define x e y como variaveis simbolicas

f = Lambda(x, (x**2 - 6*x + 2)/x)
mview(f)

mview(f(1))

mview(f(x-2))

"""#**1- LIMITES**

*  Limites pontuais
*  Limites laterais
*  Limites no infitino

##**Limites pontuais**

Bem, sabemos que limite é quando uma função **tende** para algum número, como podemos ver a baixo :

![alt text](https://www.somatematica.com.br/superior/limites/limite4.gif)

Essa função f(x) pode ser qualquer função, por isso escrevi bem geral. O limite nada mais é do que um número, essa função f(x) tenderá para esse numero caso x tender para um valor **a**. Facil não?

Agora veremos em Python como fazer isso.
"""

# Usaremos a função limit 
# primeiro parâmetro será a função onde você quer calcular o limite
# segundo parâmetro será a variavel independente 
# terceiro parâmetro será em qual ponto você quer calcular o limite 

mview(limit(f(x),x,0))

#Note que o mview() apenas tranforma o resultado em linguaguem LATEX, pois o google colab não a lêe diretamente.

# Sem o mview
limit(f(x),x,0)

#Percebeu? Fica esses sinais de $$ o que não é bonito, então por isso usaremos o mview()

"""Fácil não? Agora é so pegar prática na hora de escrever a função f(x) pois as funções matematicas nas linguaguens computacionais são mais estranhas do que fazer no papel, mas eu sei que você pegará o jeito muito rápido."""

# Vamos para mais um exemplo
h = Lambda(x,sin(x)/x)
mview(h)

# Definimos nossa função h e agora basta fazer o limite
mview(limit(h(x),x,0))

# Mais um exeplo para fixar 
K= Lambda(x,ln(x)/x**2)
mview(K)

# Definimos nossa função K e agora basta fazer o limite
mview(limit(K(x),x,0))

"""##**Limites laterais**

Por definição se os limites laterais (pela esquerda e pela direita) não forem iguais isso mostra que o limite da função não existe.

![alt text](https://s0.wp.com/latex.php?latex=%5Cdisplaystyle%5Clim%5Climits_%7Bx%5Crightarrow+a%5E%7B%2B%7D%7Df%28x%29%3DL_%7B1%7D&bg=ffffff&fg=000000&s=2) 

Esse é um limite pela direita, perceba o sinal de **+** na parte superior da letra a.

![alt text](https://s0.wp.com/latex.php?latex=%5Cdisplaystyle%5Clim%5Climits_%7Bx%5Crightarrow+a%5E%7B-%7D%7Df%28x%29%3DL_%7B2%7D&bg=ffffff&fg=000000&s=2)

Esse é um limite pela esquerda, perceba o sinal **-** na parte superior da letra a .

Por padrão, o comando limit computa o limite lateral pela direita. Por exemplo:
"""

mview(limit(f(x),x,1))

"""Para calcularmos o limite pela esquerda basta aumentar mais um argumento no comando limit:"""

mview(limit(f(x),x,1,'-'))

"""Percebeu que deu o mesmo resultado, logo o limite existe, agora se tivermos, por exemplo:"""

mview(limit(cos(x)/x,x,0))

mview(limit(cos(x)/x,x,0,'-'))

"""Percebeu que os resultados deram diferentes? logo o limite de cos(x)/x não existe quando x tende para 0."""

# Vamos para mais um exemplo suponha que sua f(x)= 1/x vamos ver se esse limite existe:
# pela direita:
mview(limit(1/x,x,0))

# pela esquerda:
mview(limit(1/x,x,0,'-'))

"""Logo o limite da função f(x)=1/x não existe.

##**Limites no infitino**

Agora vamos ver o que acontece quando queremos que o limite tenda para o infinito 

![alt text](https://www.e-scola.edu.gov.cv/images/matematica/imgs_limites/img5.jpg)
"""

# Para mais infinito:
mview(limit(1/x, x, oo))

# Para menos infinito:
mview(limit(1/x, x, -oo))

# Veremos mais um exemplo seja então f(x)=x+2
# Para mais infinito 
mview(limit(x+2, x, oo))

# Para menos infinito 
mview(limit(x+2, x, -oo))

# Suponha agora que sua f(x) seja e^x
# Para mais infinito
mview(limit(exp(x), x, oo))

# Para menos infinito 
mview(limit(x+2, x, -oo))

# Suponha agora que sua f(x) seja 1/e^x
# Para mais infinito
mview(limit(1/exp(x), x, oo))

# Para menos infinito
mview(limit(1/exp(x), x, -oo))

"""##**Gráficos de limites**

Com a biblioteca <a href="https://matplotlib.org/"> matplotlib</a> é muito simples fazer os esboços dos gráficos dos limites, sei que em muitas questões seu professor pede o gráfico e tem alguns gráficos bem complicados para fazer no papel, justamente quando você esta começando na matéria.

Como você ja deve saber por ter visto a introdução, devemos importar a biblioteca matplotlib
"""

from matplotlib import pyplot as plt
from matplotlib import rcParams # apenas para mudar o tamanho da figura
rcParams['figure.figsize'] = 12, 8 # tamanho em polegadas

import warnings
warnings.filterwarnings("ignore", category=UserWarning)
# Para tirar os avisos da biblioteca Matplotlib

plot(h(x))

plot(f(x))